<%- include("partials/header"); -%>
<%- include("partials/navbar"); -%>
<body class="mt-[80px] font-roboto">
  <div id="notification" class=" text-sm mt-2 ">
  </div>
  <div class="min-h-screen flex flex-col">
    <div class="flext justify-start">
      <div class="pt-[80px] pb-4 px-[50px]">
        <h1 class="text-4xl font-light">Shopping Cart</h1>
      </div>
    </div>

    <div class="w-full grid-cols-12  grid py-9 px-[80px] gap-3 " id="soppingCartTable">
      <div class="col-span-8 rounded-lg">
        <div class="overflow-x-auto rounded-lg">
          <table class="min-w-full bg-white border border-gray-200 rounded-md shadow-sm">
            <thead>
              <tr class="bg-gray-100 text-gray-600 text-sm">
                <th class="py-3 px-6 text-left">Product</th>
                <th class="py-3 px-6 text-center">Quantity</th>
                <th class="py-3 px-6 text-right">Total</th>
              </tr>
            </thead>
            <tbody id="cartTableBody">
             
            </tbody>
          </table>
        </div>
      </div>
      <div class="col-span-4 justify-center flex " id="totalBox">
        
      </div>
    </div>
  </div>

  <script>
 document.addEventListener("DOMContentLoaded", function () {
  cartItems();
});

const totalBox = document.getElementById('totalBox');
const shoppingCartTable = document.getElementById('soppingCartTable');
const cartTableBody = document.getElementById('cartTableBody');
let quantity = 1; 
async function cartItems() {
  try {
    const fetchResult = await fetch('/shoppingcartfetch', {
      method: 'get',
    });

    const result = await fetchResult.json();

    if (result.cart && result.cart.items.length > 0) {

      cartTableBody.innerHTML = result.cart.items
        .map(item => `
          <tr class="border-t border-gray-200">
            <td class="py-4 px-6 flex items-center cursor-pointer" onclick="ProductDetail('${item.productId._id}')">
              <img src="${item.productId.images[0]}" alt="Product Image" class="w-[60px] h-[60px] mr-4 object-contain" />
              <div>
                <p class="text-sm font-medium text-gray-800">${item.productId.productname}</p>
                <p class="text-xs text-gray-600">Rs. ${item.productId.saleprice}</p>
              </div>
            </td>
            <td class="py-4 px-6 text-center">
              <div class="flex items-center justify-center space-x-4">
                <div class="flex items-center border max-w-[120px] border-slate-300 space-x-2">
                  <button class="px-3 py-2 text-lg font-light hover:bg-gray-100 active:bg-gray-200" onclick="decrementQuantity('${item.productId._id}')">-</button>
                  <span id="quantity-${item._id}" class="text-md font-light">${item.quantity}</span>
                  <button class="px-3 py-2 text-lg font-light hover:bg-gray-100 active:bg-gray-200" onclick="incrementQuantity('${item.productId._id}')">+</button>
                </div>
                <button class="text-sm text-red-600 hover:underline" onclick="removeProduct('${item.productId._id}')">Remove</button>
              </div>
            </td>
            <td class="py-4 px-6 text-right">
              <p class="text-sm font-medium text-gray-800">Rs. ${item.saleprice * item.quantity}</p>
            </td>
          </tr>
        `).join('');

      const totalAmount = result.cart.totalamount;
      const totalRegularAmount = result.cart.totalregularamount;
      const totalDiscountAmount = result.cart.totaldiscountamount;

      const discount = totalDiscountAmount; 
      const finalTotal = totalAmount - discount;  

      let discountSection = '';
      if (discount > 0) {
        discountSection = `
          <div class="flex justify-between">
            <div>Discount</div>
            <div class="text-red-600">Rs. -${discount}</div>
          </div>
        `;
      }

      totalBox.innerHTML = `
        <div class="h-auto p-3 max-w-[300px] grid border-slate-200  grid-rows bg-white border rounded-lg">
          <div class="grid px-1 mb-1">
            <div class="flex justify-center border-b-[1px]">
              <div class="pb-2 font-medium">Cart Summary</div>
            </div>
          </div>
          <div class="grid">
            <div class="my-2 flex border-b-[1px] py-3 border-black flex-col gap-2 text-xs">
              <div class="flex justify-between">
                <div>Order value</div>
                <div>Rs. ${totalAmount}</div>
              </div>
              ${discountSection}
            </div>
            <div class="flex justify-between text-xs font-medium mb-3">
              <div>Total</div>
              <div>Rs. ${finalTotal}</div>
            </div>
            <div class="w-full mt-2 mb-2">
              <button class="w-full p-2 bg flex bg-black rounded-md text-white justify-center" onclick="checkOutLocation()">Check out</button>
            </div>
            <div class="flex flex-col gap-1 mb-3">
              <div class="flex justify-start text-sm font-bold mt-1">We accept</div>
              <div class="flex justify-between mt-1">
                <div class="text-xs font-semibold">Cash on delivery</div>
                <div><img src="/images/UPI-Black.png" class="w-[50px] h-[20px]" alt=""></div>
                <div><img src="/images/visa.png" class="w-[60px] h-[20px]" alt=""></div>
              </div>
            </div>
            <div class="text-[10px] font-light">
              <p>Prices and delivery costs are not confirmed until you've reached the checkout.
                15 days free returns. Read more about <a href="" class="underline">return and refund policy.</a>
                Customers would receive an SMS/WhatsApp notifications regarding deliveries on the registered phone number.</p>
            </div>
          </div>
        </div>
      `;
    } else {
      shoppingCartTable.innerHTML = `
  <div class="col-span-12 h-[300px] flex items-center justify-center">
    <div class="flex"><h1>Your cart is empty</h1></div>
  </div>
`;

    }

    if (result.errormessage) {
      totalBox.style.display = 'none';
      shoppingCartTable.innerHTML = `
  <div class="col-span-12 h-[300px] flex items-center justify-center">
    <div class="flex"><h1>Your cart is empty</h1></div>
  </div>
`;

    }
  } catch (error) {
    console.log(error);
  }
}
   


function checkOutLocation() {
  console.log("click");
  location.assign('/shoppingcart/checkout');
}


async function incrementQuantity(productId) {
  try {    
    const response = await fetch('/cart/quantityedit?quantityEdit=increment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId }),
    });

    const result = await response.json();

    if (response.ok) {
      cartItems();
    } else if(result.message) {
      showNotification(
        `${result.message}`
      );
    }
  } catch (error) {
    console.error('Error incrementing quantity:', error);
  }
}


// Decrement Quantity
async function decrementQuantity(productId) {
  try {
    console.log(`Decrementing quantity for ${productId}`);
    
    const response = await fetch('/cart/quantityedit?quantityEdit=decrement', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId }),
    });

    const result = await response.json();

    if (response.ok) {
      console.log('Quantity decremented successfully:', result);
      cartItems();
    } else {
      console.error('Failed to decrement quantity:', result.error);
      showNotification(
        result.error || 'An error occurred while decrementing the quantity.'   
         );
    }
  } catch (error) {
    console.error('Error decrementing quantity:', error);
  }
}

// Redirect to Product Details
function ProductDetail(productId) {
  console.log(`Navigating to product details for ${productId}`);
  location.assign(`/productdetails/${productId}`);
}

function ProductDetail(productId){
  location.assign(`/productdetails/${productId}`)
}
async function removeProduct(productId) {
  try {
    const response = await fetch('/cart/remove', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId }),
    });

    const result = await response.json();

    if (response.ok) {
      console.log(`Removed product: ${productId}`);
      showNotification(
        "Product successfully deleted from cart!"
      );
      cartItems();
    } else {
      showNotification(
        "An error occurred while deleting the product from the cart. Please try again."
      );
        }
  } catch (error) {
    console.error('Error removing product:', error);
  }
}

function showNotification(message) {
  const notification = document.getElementById("notification");

  notification.className = "";

  notification.classList.add(
    "p-4",
    "mb-4",
    "text-sm",
    "rounded-lg",
    "fixed",
    "bottom-10",
    "right-4",
    "z-50",
    "min-w-[150px]",
    "text-white",
    "bg-black",
    "dark:bg-gray-800",
    "dark:text-green-400",
    "role",
    "alert"
  );

  notification.innerHTML = ` ${message}`;

  notification.classList.remove("hidden");

  setTimeout(() => {
    hideNotification();
  }, 5000);
}

function hideNotification() {
  const notification = document.getElementById("notification");
  notification.className = "hidden";
}

  </script>

<%- include('partials/footer'); -%>
