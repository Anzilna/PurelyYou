<%- include("partials/header"); -%>
<body class="bg-gray-100">
  <div class="relative flex items-center justify-between p-4 text-xs">
    <div class="flex items-center space-x-1 text-gray-700">
      <a href="/shoppingcart" class="flex justify-center">
        <i class="bi bi-arrow-left-short fs-4"></i>
        <button class="focus:outline-none">Back to Shopping Cart</button>
      </a>
    </div>

    <h1
      class="absolute left-1/2 transform -translate-x-1/2 font-bold text-xl text-gray-800"
    >
      PurelyYou
    </h1>
  </div>
  <div class="flex justify-center text-3xl py-4 font-semibold">
    <h1>Checkout</h1>
  </div>
  <% if(cart){ %>

  <div class="p-[60px] grid grid-cols-12 gap-4">
    <div class="col-span-8">
      <div class="flex w-full h-full flex-col gap-4">
        <div
          class="p-3 bg-white cursor-pointer"
          onclick="toggleDropdown('MyInformationDropdown')"
        >
          <div class="flex justify-between">
            <div>My information</div>
            <a class="underline">view</a>
          </div>
          <div class="text-xs font-normal mt-2">
            <div><%=localsUser.username %></div>
            <div><%=localsUser.email %></div>
          </div>
          <div id="MyInformationDropdown" class="hidden mt-2">
            <div>
              <div class="flex flex-col">
                <div class="flex-col flex gap-1 text-nowrap">
                  <p class="text-sm font-medium">Username</p>
                  <p class="text-sm font-light"><%=localsUser.username %></p>
                </div>
                <div class="flex-col flex gap-1 text-nowrap">
                  <p class="text-sm font-medium">Email</p>
                  <p class="text-sm font-light"><%=localsUser.email %></p>
                </div>
                <% if (localsUser.phone) { %>
                <div class="flex-col flex gap-1 text-nowrap">
                  <p class="text-sm font-medium">Phone</p>
                  <p class="text-sm font-light"><%= localsUser.phone %></p>
                </div>
                <% } %> <% if (localsUser.dob) { %>
                <div class="flex-col flex gap-1 text-nowrap">
                  <p class="text-sm font-medium">Date of Birth</p>
                  <p class="text-sm font-light">
                    <% var dob = new Date(localsUser.dob); var formattedDOB =
                    dob.toLocaleDateString(); %> <%= formattedDOB %>
                  </p>
                </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        <div class="p-3 bg-white cursor-pointer">
          <div
            class="flex justify-between"
            onclick="toggleDropdown('billingadress')"
          >
            <div>Select address</div>
            <div
              id="addresses-data"
              class=""
              data-addresses="<%= JSON.stringify(address) %>"
            ></div>
            <a href="#" class="underline">Select</a>
          </div>
          <div id="selected-address-preview"></div>
          <div id="billingadress" class="hidden mt-3">
            <label class="block text-sm font-medium text-black mb-3"
              >Select Address</label
            >
            <div>
              <% if (address && address.addresses.length > 0) { %> <% let
              useraddress = address.addresses %> <%
              useraddress.forEach(function(addr, index) { %>
              <div class="flex justify-between">
                <div class="flex items-center mb-3">
                  <input type="radio" id="address-<%= index %>"
                  name="billingAddress" value="<%= addr._id %>" <%= index === 0
                  ? 'checked' : '' %> class="mr-2" />
                  <label
                    for="address-<%= index %>"
                    class="text-sm text-gray-700"
                  >
                    <div><%= addr.name %></div>
                    <div><%= addr.address %></div>
                    <div>
                      <%= addr.city %>, <%= addr.state %>, <%= addr.pincode %>
                    </div>
                    <div><%= addr.phone %></div>
                    <div><%= addr.email %></div>
                  </label>
                </div>
                <div class="">
                  <i
                    class="bi bi-pencil"
                    onclick="editAddress('<%= addr._id %>')"
                  ></i>
                </div>
              </div>

              <% }); %> <% } else { %>
              <p>No addresses available.</p>
              <% } %>
            </div>
          </div>
        </div>

        <div class="p-3 bg-white flex flex-col">
          <div class="p-2 font-normal text-2xl">Order items</div>
          <div id="itemsdetails" class="flex flex-col"></div>
        </div>
      </div>
    </div>
    <div class="col-span-4">
      <div class="flex w-full h-full flex-col gap-4">
        <div class="p-3 pb-0 bg-white">
          <div class="cursor-pointer">
            <div class="flex justify-between">
              <div>Payment</div>
              <a href="#" class="underline text-xs">Select</a>
            </div>
            <div class="text-xs mt-2">Select a payment method</div>
          </div>

          <div id="PaymentMethod" class="">
            <div class="mt-3 flex flex-col border-t-[1px] py-3">
              <div>
                <label class="flex items-center">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="Wallet"
                    class="mr-2"
                    onclick="showPaymentDetails('walletdetails', ['coddetails', 'razorpaydetails'])"
                  />
                  Wallet
                </label>
              </div>
              <div id="walletdetails" class="hidden text-xs mt-2">
                After clicking 'Complete Purchase', the amount will be deducted
                directly from your Wallet Balance in your account. Once the
                payment is successfully processed, you will be redirected to the
                PurelyYou Order Confirmation page.
              </div>
            </div>

            <div class="border-y-[1px] py-3">
              <div class="cursor-pointer">
                <label class="flex items-center">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="Cash on Delivery"
                    class="mr-2"
                    onclick="showPaymentDetails('coddetails', ['walletdetails', 'razorpaydetails'])"
                  />
                  Cash on Delivery (COD)
                </label>
              </div>

              <div id="coddetails" class="hidden text-xs mt-2">
                After clicking 'Complete Purchase', your order will be
                confirmed, and the payment will be collected in cash at the time
                of delivery. Please ensure you have the exact amount ready to
                complete the transaction. Once the delivery is successful, you
                will receive an email confirmation of your order completion.
              </div>
            </div>

            <div class="border-b-[1px] py-3">
              <div class="cursor-pointer flex flex-row justify-between">
                <label class="flex items-center">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="Razorpay"
                    class="mr-2"
                    onclick="showPaymentDetails('razorpaydetails', ['walletdetails', 'coddetails'])"
                  />
                  Razor Pay
                </label>
                <div class="">
                  <img
                    src="/images/razorpay-icon.png"
                    class="h-[20px] w-[90px] object-contain"
                    alt="Razor Pay"
                  />
                </div>
              </div>

              <div id="razorpaydetails" class="hidden text-xs mt-2">
                After clicking 'Complete Purchase', you will be redirected to
                the Razor Pay payment gateway. You can complete your transaction
                using a credit card, debit card, net banking, or UPI. Once the
                payment is successful, you will be redirected to the PurelyYou
                Order Confirmation page.
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white">
          <div class="h-full w-full p-3">
            <div class="flex flex-col">
              <div class="flex justify-between py-2 border-b-[1px]">
                <div>Coupon</div>
                <button class="underline text-xs" id="apply-coupon-btn">
                  Apply Coupon
                </button>
              </div>

              <div id="coupon-dropdown" class="hidden text-xs my-3">
                <div class="flex flex-row gap-2">
                  <input
                    type="text"
                    id="coupon-code"
                    placeholder="Enter Coupon Code"
                    class="px-3 py-2 text-xs flex-[7] border border-gray-300 focus:outline-none focus:border-gray-300 focus:ring-0 uppercase"
                    oninput="this.value = this.value.toUpperCase()"
                  />
                  <button
                    class="bg-black text-white text-xs py-1 flex-[2]"
                    id="submit-coupon"
                  >
                    Submit
                  </button>
                </div>
                <div
                  id="coupon-container"
                  class="flex hidden justify-between items-center mt-3 bg-black p-2 rounded-md shadow-md"
                ></div>
                <div
                  id="coupon-error"
                  class="hidden text-xs text-red-600 mt-2"
                ></div>
              </div>

              <% let deliveryCharge = 0; %> <% if (cart.totalamount < 799) { %>
              <% deliveryCharge = 60; %> <% } %>

              <div class="py-3 flex flex-col gap-2 border-black border-b-[1px]">
                <div class="flex justify-between text-xs">
                  <p>Order value</p>
                  <p>Rs. <%= cart.totalamount %></p>
                </div>
                <div class="flex justify-between text-xs">
                  <p>Discount</p>
                  <p class="text-red-600">
                    Rs. -<%= cart.totaldiscountamount %>
                  </p>
                </div>
                <div
                  class="flex justify-between text-xs hidden"
                  id="coupondiscountamountdiv"
                ></div>
                <div class="flex justify-between text-xs">
                  <p>Delivery</p>
                  <p>Rs. <%= deliveryCharge %></p>
                </div>
              </div>

              <div
                class="flex justify-between pt-1 text-md font-medium"
                id="last-total-amount"
              >
                <p>Total</p>
                <p>
                  Rs. <%= cart.totalamount + deliveryCharge -
                  cart.totaldiscountamount %>
                </p>
              </div>
              <div
                id="cart-data"
                class="hidden"
                data-total-amount="<%= cart.totalamount %>"
                data-total-discount="<%= cart.totaldiscountamount %>"
                data-delivery-charge="<%= deliveryCharge %>"
                data-username="<%= localsUser.username %>"
                data-email="<%= localsUser.email %>"
              ></div>

              <div class="mt-4 flex flex-col text-xs font-normal">
                <div>
                  By continuing, you agree to
                  <div class="underline">
                    PurelyYou General Terms and Conditions.
                  </div>
                </div>
                <div class="mt-3">
                  We will process your personal data in accordance with the
                  <div class="underline">PurelyYou Privacy Notice.</div>
                </div>
              </div>
              <div class="mt-3">
                <button
                  class="w-full h-full py-2 bg-black text-white"
                  id="complete-btn"
                >
                  Complete purchase
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class=""></div>
      </div>
    </div>
  </div>
  <% } %>
  <div id="notification" class="text-sm mt-2"></div>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    fetchCheckoutData();
    const lastTotalAmountElement = document.getElementById("last-total-amount");
    const addressesElement = document.getElementById("addresses-data");
    const addressList = JSON.parse(
      addressesElement.getAttribute("data-addresses")
    );
    console.log("Address List:", addressList);

    const addressRadios = document.querySelectorAll(
      'input[name="billingAddress"]'
    );
    const defaultCheckedRadio = document.querySelector(
      'input[name="billingAddress"]:checked'
    );
    if (defaultCheckedRadio) {
      updateAddressPreview(defaultCheckedRadio.value);
    }

    addressRadios.forEach((radio) => {
      radio.addEventListener("change", function () {
        console.log("Radio selected:", this.value);
        const selectedAddressId = this.value;
        updateAddressPreview(selectedAddressId);
      });
    });

    function updateAddressPreview(addressId) {
      const selectedAddressPreview = document.getElementById(
        "selected-address-preview"
      );
      const selectedAddress = addressList.addresses.find(
        (addr) => addr._id === addressId
      );

      if (selectedAddress) {
        selectedAddressPreview.innerHTML = `
        <div class="flex flex-col">
          <p class="text-sm mt-3 mb-1 font-medium">Selected Address:</p>
          <p class="text-xs text-gray-700">${selectedAddress.name}</p>
          <p class="text-xs text-gray-700">${selectedAddress.address}</p>
          <p class="text-xs text-gray-700">${selectedAddress.city}, ${selectedAddress.state}, ${selectedAddress.pincode}</p>
          <p class="text-xs text-gray-700">${selectedAddress.phone}</p>
          <p class="text-xs text-gray-700">${selectedAddress.email}</p>
        </div>
      `;
      } else {
        selectedAddressPreview.innerHTML = `<p class="text-sm text-gray-500">No address selected.</p>`;
      }
    }

    const cartData = document.getElementById("cart-data");
    var totalAmount = parseFloat(cartData.getAttribute("data-total-amount"));
    let totalDiscount = parseFloat(
      cartData.getAttribute("data-total-discount")
    );
    let deliveryCharge = parseFloat(
      cartData.getAttribute("data-delivery-charge")
    );
    let finalOrderAmount = totalAmount - totalDiscount + deliveryCharge;

    const username = cartData.getAttribute("data-username");
    const email = cartData.getAttribute("data-email");
    const couponDiscountDiv = document.getElementById(
      "coupondiscountamountdiv"
    );
    let OrderCoupponCode = "";
    let OrderCoupponDiscountedValue = "";
    let OrderCoupponID = "";

    console.log("Total Amount:", totalAmount);
    console.log("Total Discount:", totalDiscount);
    console.log("Delivery Charge:", deliveryCharge);
    console.log("Username:", username);
    console.log("Email:", email);

    async function fetchCheckoutData() {
      const itemsDetails = document.getElementById("itemsdetails");
      try {
        const response = await fetch("/shoppingcart/checkoutfetch", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Checkout Data:", data);
        itemsDetails.innerHTML = data.cart.items
          .map((item) => {
            return `
      <div id="itemsdisplay" class="flex flex-col gap">
        <div class="flex flex-row gap-3 m-2">
          <div class="flex-[1]">
            <img
              src="${item.productId.images[0]}"
              class="h-full w-full"
              alt="${item.productId.productname}"
            />
          </div>
          <div class="flex-[6]">
            <div class="flex flex-col h-full w-full">
              <div
                class="flex-[2] flex justify-start flex-col gap-[1px] items-start"
              >
                <div class="text-lg font-medium">
                  ${item.productId.productname}
                </div>
                <div class="text-xs font-medium">
                  Rs.${item.productId.saleprice}
                </div>
              </div>
              <div
                class="flex-[5] flex justify-end flex-col align-bottom"
              >
                <div class="flex">
                  <div
                    class="flex-[2] flex text-xs font-normal justify-start flex-col"
                  >
                    <div>Quantity</div>
                    <div>Regular Price</div>
                    <div>Total</div>
                  </div>
                  <div
                    class="flex-[5] text-xs font-normal flex justify-start flex-col"
                  >
                    <div>${item.quantity}</div>
                    <div>Rs.${item.regularprice}</div>
                    <div>Rs.${item.saleprice}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
          })
          .join("");
      } catch (error) {
        console.error("Error fetching checkout data:", error);
      }
    }

    document
      .getElementById("complete-btn")
      .addEventListener("click", async function () {
        const selectedAddress = document.querySelector(
          'input[name="billingAddress"]:checked'
        )?.value;

        const paymentMethod = document.querySelector(
          'input[name="paymentMethod"]:checked'
        )?.value;

        console.log("Selected Address:", selectedAddress);
        console.log("Selected Payment Method:", paymentMethod);

        if (!selectedAddress || !paymentMethod) {
          showNotification("Please select both address and payment method.");

          return;
        }

        console.log("Final Amount:", finalOrderAmount);

        const orderData = {
          totalAmount: finalOrderAmount,
          totalDiscount,
          deliveryCharge,
          paymentMethod: paymentMethod,
          userInfo: {
            username: username,
            email: email,
          },
          addressId: selectedAddress,
        };

        if (OrderCoupponCode && OrderCoupponDiscountedValue && OrderCoupponID) {
          orderData.coupponCode = OrderCoupponCode;
          orderData.coupponDiscount = OrderCoupponDiscountedValue;
          orderData.coupponId = OrderCoupponID;
        }
        if (paymentMethod.includes("Razorpay")) {
          console.log("Inside Razorpay");

          try {
            const response = await fetch("/razorpay/createorder", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                amount: finalOrderAmount,
                currency: "INR",
              }),
            });

            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const { order, key_id } = await response.json();

            const options = {
              key: key_id,
              amount: order.amount,
              currency: order.currency,
              name: "PurelyYou",
              description: "Test Transaction",
              order_id: order.id,
              handler: async function (response) {
                console.log("Payment successful!", response);

                showNotification(
                  "Payment successful! Verifying your payment..."
                );

                try {
                  const verifyResponse = await fetch(
                    "/razorpay/verifypayment",
                    {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                      }),
                    }
                  );

                  const verifyResult = await verifyResponse.json();

                  if (verifyResponse.ok && verifyResult.success) {
                    showNotification(
                      "Payment verified successfully! Thank you for your purchase."
                    );

                    const orderResponse = await fetch(
                      "/shoppingcart/checkout/order",
                      {
                        method: "POST",
                        body: JSON.stringify(orderData),
                        headers: {
                          "Content-Type": "application/json",
                        },
                      }
                    );

                    const orderDataResult = await orderResponse.json();

                    if (orderResponse.ok) {
                      console.log(
                        "Order completed successfully:",
                        orderDataResult
                      );
                      showNotification(orderDataResult.message);
                      location.assign(
                        `/shoppingcart/checkout/orderplaced/${orderDataResult.order._id}`
                      );
                    } else {
                      console.error("Error completing order:", orderDataResult);
                      showNotification(orderDataResult.error);
                    }
                  } else {
                    showNotification(
                      "Payment verification failed. Please contact support."
                    );

                    console.error("Payment verification failed:", verifyResult);
                  }
                } catch (error) {
                  console.error("Error verifying payment:", error);
                  showNotification(
                    "An error occurred during payment verification. Please try again"
                  );
                }
              },
              prefill: {
                name: username,
                email: email,
                contact: "9999999999",
              },
              theme: {
                color: "#3399cc",
              },
              notes: {
                address: "Razorpay HQ",
              },
              modal: {
                ondismiss: function () {
                  console.log("Payment process closed by the user.");
                },
              },
            };

            options.method = ["card", "netbanking", "wallet", "upi"];

            const rzp = new Razorpay(options);
            rzp.open();

            rzp.on("payment.failed", function (response) {
              console.error("Payment failed:", response.error);
              showNotification("Payment failed. Please try again.");
            });
          } catch (error) {
            console.error(
              "Error occurred while making Razorpay API call:",
              error
            );
          }
        } else {
          console.log("Order Data:", orderData);

          try {
            const response = await fetch("/shoppingcart/checkout/order", {
              method: "POST",
              body: JSON.stringify(orderData),
              headers: {
                "Content-Type": "application/json",
              },
            });

            const data = await response.json();

            if (response.ok) {
              console.log("Order completed successfully:", data);
              showNotification(data.message);
              location.assign(
                `/shoppingcart/checkout/orderplaced/${data.order._id}`
              );
            } else {
              console.error("Error completing order:", data);
              showNotification(data.error);
            }
          } catch (error) {
            console.error("An error occurred:", error);
            showNotification("An error occurred while processing your order.");
          }
        }
      });

    // Apply coupon functionality
    const applyCouponBtn = document.getElementById("apply-coupon-btn");
    const couponDropdown = document.getElementById("coupon-dropdown");

    applyCouponBtn.addEventListener("click", function () {
      couponDropdown.classList.toggle("hidden");
    });

    const submitCouponBtn = document.getElementById("submit-coupon");
    const couponCodeInput = document.getElementById("coupon-code");
    const couponError = document.getElementById("coupon-error");

    submitCouponBtn.addEventListener("click", async function () {
      const couponCode = couponCodeInput.value.trim();
      const finalAmount = totalAmount - totalDiscount + deliveryCharge;
      const couponContainer = document.getElementById("coupon-container");
      const couponCodeElement = document.getElementById("coupon-code");

      if (couponCode) {
        try {
          couponError.classList.add("hidden");

          const response = await fetch("/shoppingcart/checkout/couponapply", {
            method: "POST",
            body: JSON.stringify({ couponCode, finalAmount }),
            headers: { "Content-Type": "application/json" },
          });

          const data = await response.json();

          if (response.ok) {
            showNotification(data.message);
            couponContainer.classList.remove("hidden");
            couponContainer.innerHTML = `
 <span class="text-sm font-medium text-white">Coupon Applied: <strong id="coupon-code" class="text-white">${data.couponCode}</strong></span>
  <button id="close-coupon-btn" class="text-white hover:text-gray-300 font-bold text-lg focus:outline-none">
    &times;
  </button>`;
            couponDiscountDiv.classList.remove("hidden");
            couponDiscountDiv.innerHTML = `
    <p>Couppon Discount</p>
                  <p class="text-red-600">
                    Rs. -${data.reductionAmount}
                  </p>
  `;
            const closeCouponBtn = document.getElementById("close-coupon-btn");
            lastTotalAmountElement.innerHTML = `
 <p>Total</p>
                <p >
                  Rs. ${data.discountedAmount}
                </p>
`;
            finalOrderAmount = data.discountedAmount;
            OrderCoupponDiscountedValue = data.reductionAmount;
            OrderCoupponCode = data.couponCode;
            OrderCoupponID = data.couponId;

            closeCouponBtn.addEventListener("click", function () {
              couponContainer.classList.add("hidden");
              couponCodeInput.value = "";
              couponDiscountDiv.classList.add("hidden");
              OrderCoupponDiscountedValue = "";
              OrderCoupponCode = "";
              OrderCoupponID = "";

              lastTotalAmountElement.innerHTML = `
 <p>Total</p>
                <p >
                  Rs. ${data.originalAmount}
                </p>
`;
              finalOrderAmount = data.originalAmount;
            });
          } else {
            showError(data.message);
            showNotification(data.message);
          }
        } catch (error) {
          console.error("Error applying coupon:", error);
          showError("An error occurred while applying the coupon.");
        }
      } else {
        showError("Please enter a coupon code.");
      }
    });

    function showError(message) {
      couponError.textContent = message;
      couponError.classList.remove("hidden");
    }

    // Toggle and other utility functions
    function toggleDropdown(id) {
      const element = document.getElementById(id);
      if (element) {
        console.log("Toggling dropdown visibility for:", id);
        element.classList.toggle("hidden");
      } else {
        console.log("Element not found for toggle:", id);
      }
    }
    function showNotification(message) {
      const notification = document.getElementById("notification");

      notification.className = "";

      notification.classList.add(
        "p-4",
        "mb-4",
        "text-sm",
        "rounded-lg",
        "fixed",
        "bottom-10",
        "right-4",
        "z-50",
        "min-w-[150px]",
        "text-white",
        "bg-black",
        "dark:bg-gray-800",
        "dark:text-green-400",
        "role",
        "alert"
      );

      notification.innerHTML = ` ${message}`;

      notification.classList.remove("hidden");

      setTimeout(() => {
        hideNotification();
      }, 5000);
    }

    function hideNotification() {
      const notification = document.getElementById("notification");
      notification.className = "hidden";
    }

    function showPaymentDetails(showId, hideIds) {
      const showElement = document.getElementById(showId);
      const hideElements = hideIds.map((id) => document.getElementById(id));

      if (showElement) {
        console.log("Showing payment details for:", showId);
        showElement.classList.remove("hidden");
      } else {
        console.log("Element not found for show payment details:", showId);
      }

      hideElements.forEach((element) => {
        if (element) {
          console.log("Hiding element:", element.id);
          element.classList.add("hidden");
        }
      });
    }
  </script>
</body>
